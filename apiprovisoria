openapi: 3.0.3
info:
  title: API de Gerenciamento de Usuários
  description:
    Esta API permite o gerenciamento de usuários — incluindo criação, leitura, atualização e exclusão.
    É um exemplo funcional para simular uma API REST completa.
  version: 1.0.0
  contact:
    name: Equipe de Desenvolvimento
    email: suporte@exemplo.com

servers:
  - url: https://api.exemplo.com/v1
    description: Servidor de produção (simulado)
  - url: http://localhost:3000/v1
    description: Servidor local de desenvolvimento

tags:
  - name: Usuários
    description: Operações relacionadas a usuários

paths:
  /users:
    get:
      tags: [Usuários]
      summary: Lista todos os usuários
      description: Retorna uma lista com todos os usuários cadastrados.
      responses:
        '200':
          description: Lista de usuários retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: 1
                  nome: Ana Silva
                  email: ana.silva@example.com
                - id: 2
                  nome: João Pereira
                  email: joao.pereira@example.com

    post:
      tags: [Usuários]
      summary: Cria um novo usuário
      description: Adiciona um novo usuário ao sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            example:
              nome: Carlos Santos
              email: carlos.santos@example.com
      responses:
        '201':
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 3
                nome: Carlos Santos
                email: carlos.santos@example.com
        '400':
          description: Requisição inválida (dados incorretos).

  /users/{id}:
    get:
      tags: [Usuários]
      summary: Busca um usuário pelo ID
      description: Retorna os dados de um usuário específico.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID do usuário
      responses:
        '200':
          description: Usuário encontrado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                nome: Ana Silva
                email: ana.silva@example.com
        '404':
          description: Usuário não encontrado.

    put:
      tags: [Usuários]
      summary: Atualiza um usuário existente
      description: Atualiza os dados de um usuário pelo ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            example:
              nome: Ana Silva Lima
              email: ana.lima@example.com
      responses:
        '200':
          description: Usuário atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                nome: Ana Silva Lima
                email: ana.lima@example.com
        '404':
          description: Usuário não encontrado.

    delete:
      tags: [Usuários]
      summary: Remove um usuário
      description: Exclui um usuário existente pelo ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID do usuário
      responses:
        '204':
          description: Usuário deletado com sucesso (sem conteúdo).
        '404':
          description: Usuário não encontrado.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao.silva@example.com
      required: [id, nome, email]

    UserInput:
      type: object
      properties:
        nome:
          type: string
          example: Maria Souza
        email:
          type: string
          format: email
          example: maria.souza@example.com
      required: [nome, email]
